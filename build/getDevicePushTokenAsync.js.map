{"version":3,"file":"getDevicePushTokenAsync.js","sourceRoot":"","sources":["../src/getDevicePushTokenAsync.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,mBAAmB,EAAE,QAAQ,EAAE,MAAM,kBAAkB,CAAC;AAEjE,OAAO,gBAAgB,MAAM,oBAAoB,CAAC;AAGlD,MAAM,CAAC,OAAO,CAAC,KAAK,UAAU,uBAAuB;IACnD,IAAI,CAAC,gBAAgB,CAAC,uBAAuB,EAAE;QAC7C,MAAM,IAAI,mBAAmB,CAAC,mBAAmB,EAAE,yBAAyB,CAAC,CAAC;KAC/E;IAED,MAAM,eAAe,GAAG,MAAM,gBAAgB,CAAC,uBAAuB,EAAE,CAAC;IAEzE,uFAAuF;IACvF,OAAO,EAAE,IAAI,EAAE,QAAQ,CAAC,EAAE,EAAE,IAAI,EAAE,eAAe,EAAE,CAAC;AACtD,CAAC","sourcesContent":["import { UnavailabilityError, Platform } from '@unimodules/core';\n\nimport PushTokenManager from './PushTokenManager';\nimport { DevicePushToken } from './Tokens.types';\n\nexport default async function getDevicePushTokenAsync(): Promise<DevicePushToken> {\n  if (!PushTokenManager.getDevicePushTokenAsync) {\n    throw new UnavailabilityError('ExpoNotifications', 'getDevicePushTokenAsync');\n  }\n\n  const devicePushToken = await PushTokenManager.getDevicePushTokenAsync();\n\n  // @ts-ignore: TS thinks Platform.OS could be anything and can't decide what type is it\n  return { type: Platform.OS, data: devicePushToken };\n}\n"]}